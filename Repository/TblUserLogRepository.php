<?php

namespace Orca\UserLogBundle\Repository;

use Doctrine\DBAL\Migrations\Provider\OrmSchemaProvider;
use Doctrine\DBAL\Schema\Comparator;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\SchemaTool;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * TblUserLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TblUserLogRepository extends \Doctrine\ORM\EntityRepository
{

    protected $container;
    protected $em;
    protected $userlog_entity;
    protected $userlog_repository;
    protected $table_name;
    protected $user_class;

    public function __construct(ContainerInterface $container, EntityManagerInterface $em)
    {
        $this->userlog_entity = $container->getParameter('orca_user_log.userlog_entity');
        $this->userlog_repository = $container->getParameter('orca_user_log.userlog_repository');
        $this->table_name = $container->getParameter('orca_user_log.table_name');
        $this->user_class = $container->getParameter('orca_user_log.user_class');
        $this->container = $container;
        $this->em= $em;
    }
    public function getNbConnexionByTypeTerminal($month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct, u.terminalType')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->groupBy('u.terminalType')
            ->setParameters(['var' => 'Login_BO', 'month' => $month, 'year' => $year])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbConexionByTerminal($month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct, u.terminal')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->groupBy('u.terminal')
            ->setParameters(['var' => 'Login_BO', 'month' => $month, 'year' => $year])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbConnexionByDay($day, $month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("DATE_FORMAT(u.date, '%d') = :day")
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->setParameters(['var' => 'Login_BO', 'day' => $day, 'month' => $month, 'year' => $year])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getConnexionByDay($day, $month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('*')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("DATE_FORMAT(u.date, '%d') = :day")
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->setParameters(['var' => 'Login_BO', 'day' => $day, 'month' => $month, 'year' => $year])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbErrorByDay($day, $month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct')
            ->from($this->userlog_repository, 'u')
            ->where('u.errorCode != 200')
            ->andWhere('u.errorCode != 302')
            ->andWhere("DATE_FORMAT(u.date, '%d') = :day")
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->andWhere("u.uri NOT LIKE :bundle")
            ->andWhere("u.uri NOT LIKE :userlog")
            ->setParameters(
                [
                    'day' => $day,
                    'month' => $month,
                    'year' => $year,
                    'bundle' => '%/bundles/%',
                    'userlog' => '%/userLogChart/%',
                ]
            )
            ->getQuery()
            ->getResult();
        return $query;
    }

    public function getNbConnexionByMonth($month, $year)
    {

        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->setParameters(['var' => 'Login_BO', 'month' => $month, 'year' => $year])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbErrorsByMonth($month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct')
            ->from($this->userlog_repository, 'u')
            ->where('u.errorCode != 200')
            ->andWhere('u.errorCode != 201')->andWhere('u.errorCode != 202')->andWhere('u.errorCode != 203')->andWhere('u.errorCode != 204')->andWhere('u.errorCode != 205')
            ->andWhere('u.errorCode != 206')->andWhere('u.errorCode != 207')->andWhere('u.errorCode != 208')->andWhere('u.errorCode != 210')->andWhere('u.errorCode != 226')
            ->andWhere('u.errorCode != 302')->andWhere('u.errorCode != 300')->andWhere('u.errorCode != 301')->andWhere('u.errorCode != 303')->andWhere('u.errorCode != 304')
            ->andWhere('u.errorCode != 305')->andWhere('u.errorCode != 306')->andWhere('u.errorCode != 307')->andWhere('u.errorCode != 308')->andWhere('u.errorCode != 310')
            ->andWhere("DATE_FORMAT(u.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(u.date, '%Y') = :year")
            ->andWhere("u.uri NOT LIKE :bundle")
            ->andWhere("u.uri NOT LIKE :userlog")
            ->setParameters(
                [
                    'month' => $month,
                    'year' => $year,
                    'bundle' => '%/bundles/%',
                    'userlog' => '%/userLogChart/%',
                ]
            )
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getMonths($year)
    {
        $query = $this->em->createQueryBuilder()
            ->select("DISTINCT (DATE_FORMAT(u.date, '%m')) as mois")
            ->from($this->userlog_repository, 'u')
            ->where("DATE_FORMAT(u.date, '%Y') = :year")
            ->setParameter('year', $year)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbConnexionByTerminalAndByMonth($year)
    {
        $sql = "SELECT terminal, GROUP_CONCAT(nb) AS nb
                FROM(
                SELECT DISTINCT u.`terminal`,DATE_FORMAT(u.`date`, \"%m\") AS mois, COUNT(u.action) AS nb
                FROM `".$this->table_name."` u 
                WHERE u.`action` = :var
                AND DATE_FORMAT(u.`date`, \"%Y\") = :year
                GROUP BY u.`terminal`, DATE_FORMAT(u.`date`, \"%m\")
                ) tab
                GROUP BY tab.terminal";
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('terminal', 'terminal');
        $rsm->addScalarResult('nb', 'nb');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters(['var' => 'Login_BO', 'year' => $year]);

        return $query->getResult();
    }

    public function getConnexions($start, $end, $search, $dir, $iCol,$offset,$limit)
    {
        $sql = "SELECT l.`user_id`, COUNT(*) AS nb_connexion,MAX(l.date) AS last_conn, GROUP_CONCAT( DISTINCT l.`terminal`) AS terminals,
                (
                SELECT COUNT(lo.`error_code`)
                FROM `".$this->table_name."` lo
                WHERE lo.`error_code` NOT IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND lo.`user_id`=l.`user_id`
                ) AS nb_erreur
                FROM `".$this->table_name."` l 
                WHERE l.`action` = 'Login_BO'
                AND l.`date` >= :start
                AND l.`date` <= :dateend";



        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search OR l.`terminal LIKE :search)";
        }
        $sql .=" GROUP BY l.`user_id`";

        if ($dir == null)
        $dir = 'DESC';

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
            break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
            break;
            default:
                $sql .= " ORDER BY nb_connexion $dir";
            break;
        }

        $sql .=" LIMIT :lf OFFSET :off";


        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('user_id', 'user');
        $rsm->addScalarResult('nb_connexion', 'nb_con');
        $rsm->addScalarResult('nb_erreur', 'nb_err');
        $rsm->addScalarResult('last_conn', 'last_conn');
        $rsm->addScalarResult('terminals', 'ters');
        $query = $this->em->createNativeQuery($sql, $rsm)
                          ->setParameters([
                              'start'    =>  $start,
                              'dateend'    =>  $end,
                              'search' => "%".$search['value']."%",
                              'lf'  =>  (int)$limit,
                              'off'  =>  (int)$offset
                          ])
        ;

        return $query->getResult();
    }
    public function getCountConnexions($start, $end, $search)
    {
        $sql = "SELECT count(*) as 'count'
                FROM `".$this->table_name."` l 
                WHERE l.`action` = 'Login_BO'
                AND l.`date` >= :start
                AND l.`date` <= :dateend";

        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search
                    OR l.`uri` LIKE :search
                    OR l.`terminal_type` LIKE :search
                    OR l.`ville` LIKE :search)";
        }

        $sql .=" GROUP BY l.`user_id`";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('count', 'count');
        $query = $this->em->createNativeQuery($sql, $rsm)
                          ->setParameters([
                              'start'    =>  $start,
                              'dateend'    =>  $end,
                              'search' => "%".$search['value']."%",
                          ])
        ;
        return count($query->getArrayResult());
    }

    public function getWsConnexions($start, $end, $search, $dir, $iCol,$offset,$limit)
    {


        $sql = "SELECT l.`user_id`, COUNT(*) AS nb_connexion,MAX(l.date) AS last_conn, GROUP_CONCAT( DISTINCT l.`terminal`) AS terminals, l.`header`, l.`post_params`, l.`get_params`
                FROM `".$this->table_name."` l 
                WHERE l.`action` LIKE '%Ws%'
                AND l.`date` = :start
                AND l.`date` = :dateend
                AND (l.`route_name` LIKE '%Token%' OR l.`route_name` LIKE '%auth%' )
                AND l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`header` IS NOT NULL";




        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search OR l.`terminal LIKE :search)";
        }

        $sql .=" GROUP BY REPLACE(CONCAT(post_params,get_params),'[]','')";
        if ($dir == null)
        $dir = 'DESC';

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
            break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
            break;
            default:
                $sql .= " ORDER BY nb_connexion $dir";
            break;
        }

        $sql .=" LIMIT :lf OFFSET :off";


        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('user_id', 'id');
        $rsm->addScalarResult('nb_connexion', 'nb_con');
        $rsm->addScalarResult('last_conn', 'last_conn');
        $rsm->addScalarResult('terminals', 'ters');
        $rsm->addScalarResult('header', 'header');
        $rsm->addScalarResult('post_params', 'postParams');
        $rsm->addScalarResult('get_params', 'getParams');
        $query = $this->em->createNativeQuery($sql, $rsm)
                          ->setParameters([
                              'start'    =>  $start,
                              'dateend'    =>  $end,
                              'search' => "%".$search['value']."%",
                              'lf'  =>  (int)$limit,
                              'off'  =>  (int)$offset
                          ])
        ;

        return $query->getResult();
    }
    public function getCountWsConnexions($start, $end, $search)
    {


        $sql = "SELECT count(*) as 'count' 
                FROM `".$this->table_name."` l 
                WHERE l.`action` LIKE '%Ws%'
                AND l.`date` = :start
                AND l.`date` = :dateend
                AND (l.`route_name` LIKE '%Token%' OR l.`route_name` LIKE '%auth%' )
                AND l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`header` IS NOT NULL";

        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search OR l.`terminal LIKE :search)";
        }

        $sql .=" GROUP BY REPLACE(CONCAT(post_params,get_params),'[]','')";


        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('count', 'count');
        $query = $this->em->createNativeQuery($sql, $rsm)
                          ->setParameters([
                              'start'    =>  $start,
                              'dateend'    =>  $end,
                              'search' => "%".$search['value']."%",
                          ])
        ;
        return count($query->getArrayResult());
    }

    public function getBoActions($start, $end, $search = null, $dir = null, $iCol = null, $offset=0, $limit=10)
    {
//        var_dump(func_get_args());die;
        $sql = "SELECT l.`id`, l.`date`, l.`uri`, l.`terminal_type`, l.`ville`, l.`user_id`, l.`error_code`, l.`header`, l.`post_params`, l.`get_params`
                FROM `".$this->table_name."` l
                WHERE l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`action` NOT LIKE :ws
                AND l.`uri` NOT LIKE :api
                AND l.`uri` NOT LIKE :log
                AND l.`uri` NOT LIKE :draw
                AND l.`user_id` != 0
                AND l.`route_name` NOT LIKE :login
                AND l.`route_name` NOT LIKE :logout
                AND l.`date` >= :start
                AND l.`date` <= :dateend"
        ;
        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search
                    OR l.`uri` LIKE :search
                    OR l.`terminal_type` LIKE :search
                    OR l.`ville` LIKE :search)";
        }



        if ($dir == null)
        $dir = 'DESC';

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
            break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
            break;
            case 3:
                $sql .= " ORDER BY l.`uri` $dir";
            break;
            case 4:
                $sql .= " ORDER BY l.`header` $dir";
            break;
            case 5:
                $sql .= " ORDER BY l.`post_params` $dir";
            break;
            case 6:
                $sql .= " ORDER BY l.`get_params` $dir";
            break;
            case 7:
                $sql .= " ORDER BY l.`terminal_type` $dir";
            break;
            case 8:
                $sql .= " ORDER BY l.`ville` $dir";
            break;
            default:
                $sql .= " ORDER BY l.`date` $dir";
            break;

        }

        $sql .=" LIMIT :lf OFFSET :off";
        //die($sql);
        //
        //        -- AND DATE_FORMAT(l.`date`, "%d") >= :days
        //    -- AND DATE_FORMAT(l.`date`, "%m") = :mois
        //    -- AND DATE_FORMAT(l.`date`, "%Y") = :annee
//        var_dump($dir);die;
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('date', 'Date');
        //$rsm->addScalarResult('action', 'action');
        $rsm->addScalarResult('uri', 'URL');
        $rsm->addScalarResult('terminal_type', 'Terminal');
        $rsm->addScalarResult('ville', 'Zone');
        $rsm->addScalarResult('user_id', 'Utilisateur');
        $rsm->addScalarResult('error_code', 'errorCode');
        $rsm->addScalarResult('header', 'Header');
        $rsm->addScalarResult('post_params', 'Post');
        $rsm->addScalarResult('get_params', 'Get');

        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters([
                'start'    =>  $start,
                'dateend'    =>  $end,
//                'dir' => $dir,
                'search' => "%".$search['value']."%",
                'ws'  =>  'Ws\\\%',
                'api' =>  '%/api/%',
                'login' => 'login_check',
                'logout' => 'logout',
                'log' =>  '%/userLogChart/%',
                'draw'  =>  '%draw%',
                'lf'  =>  (int)$limit,
                'off'  =>  (int)$offset
            ])
        ;
        return $query->getResult();
    }

    public function getCountBoActions($start, $end, $search = null, $dir = null, $iCol = null)
    {


        $sql = "SELECT count(*) as 'count'
                FROM `".$this->table_name."` l
                WHERE l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`action` NOT LIKE :ws
                AND l.`uri` NOT LIKE :api
                AND l.`uri` NOT LIKE :log
                AND l.`uri` NOT LIKE :draw
                AND l.`user_id` != 0
                AND l.`route_name` NOT LIKE :login
                AND l.`route_name` NOT LIKE :logout
                AND l.`date` >= :start
                AND l.`date` <= :dateend"
        ;
        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search
                    OR l.`uri` LIKE :search
                    OR l.`terminal_type` LIKE :search
                    OR l.`ville` LIKE :search)";
        }


        if ($dir == null)
            $sql .= " ORDER BY l.`date` desc";

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
                break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
                break;
            case 3:
                $sql .= " ORDER BY l.`uri` $dir";
                break;
            case 4:
                $sql .= " ORDER BY l.`header` $dir";
                break;
            case 5:
                $sql .= " ORDER BY l.`post_params` $dir";
                break;
            case 6:
                $sql .= " ORDER BY l.`get_params` $dir";
                break;
            case 7:
                $sql .= " ORDER BY l.`terminal_type` $dir";
                break;
            case 8:
                $sql .= " ORDER BY l.`ville` $dir";
                break;
        }
        //$sql .=" LIMIT :lf OFFSET :off";
        //
        //        -- AND DATE_FORMAT(l.`date`, "%d") >= :days
        //    -- AND DATE_FORMAT(l.`date`, "%m") = :mois
        //    -- AND DATE_FORMAT(l.`date`, "%Y") = :annee
//        var_dump($dir);die;
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('count', 'count');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters([
                'start'    =>  $start,
                'dateend'    =>  $end,
//                'dir' => $dir,
                'search' => "%".$search['value']."%",
                'ws'  =>  'Ws\\\%',
                'api' =>  '%/api/%',
                'login' => 'login_check',
                'logout' => 'logout',
                'log' =>  '%/userLogChart/%',
                'draw'  =>  '%draw%',
               // 'lf'  =>  (int)$limit,
                //'off'  =>  (int)$offset
            ])
        ;
        return $query->getSingleScalarResult();
    }

    public function getBoActionsAjax($start, $end, $id)
    {
        $sql = "SELECT l.`id`, l.`date`, l.`action`, l.`uri`, l.`terminal_type`, l.`ville`, l.`user_id`, l.`error_code`, l.`header`, l.`post_params`, l.`get_params`
                FROM `".$this->table_name."` l
                WHERE l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`action` NOT LIKE :ws
                AND l.`uri` NOT LIKE :api
                AND l.`uri` NOT LIKE :log
                AND l.`uri` NOT LIKE :draw
                AND l.`user_id` != 0
                AND l.`route_name` NOT LIKE :login
                AND l.`route_name` NOT LIKE :logout
                AND l.`date` >= :start
                AND l.`date` <= :end
                AND l.`id` = :id
                ORDER BY l.`date` DESC"
        ;
        //
        //        -- AND DATE_FORMAT(l.`date`, "%d") >= :days
        //    -- AND DATE_FORMAT(l.`date`, "%m") = :mois
        //    -- AND DATE_FORMAT(l.`date`, "%Y") = :annee

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('date', 'date');
        $rsm->addScalarResult('action', 'action');
        $rsm->addScalarResult('uri', 'uri');
        $rsm->addScalarResult('terminal_type', 'terminalType');
        $rsm->addScalarResult('ville', 'ville');
        $rsm->addScalarResult('user_id', 'user');
        $rsm->addScalarResult('error_code', 'errorCode');
        $rsm->addScalarResult('header', 'header');
        $rsm->addScalarResult('post_params', 'postParams');
        $rsm->addScalarResult('get_params', 'getParams');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters([
                'start'    =>  $start,
                'end'    =>  $end,
                'id' => $id,
                'ws'  =>  'Ws\\\%',
                'api' =>  '%/api/%',
                'login' => 'login_check',
                'logout' => 'logout',
                'log' =>  '%/userLogChart/%',
                'draw'  =>  '%draw%'
            ])
        ;

        return $query->getSingleResult();
    }

    public function getWsActions($start, $end, $search = null, $dir = null, $iCol = null, $offset=0, $limit=10)
    {

        $sql = "SELECT l.`id`, l.`date`, l.`uri`, l.`terminal_type`, l.`ville`, l.`user_id`, l.`error_code`, l.`header`, l.`post_params`, l.`get_params`
                FROM `".$this->table_name."` l
                WHERE l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`action` LIKE :ws
                AND l.`uri` LIKE :api
                AND l.`user_id` != 0
                AND l.`date` >= :start
                AND l.`date` <= :end"
        ;
        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search
                    OR l.`uri` LIKE :search
                    OR l.`terminal_type` LIKE :search
                    OR l.`ville` LIKE :search)";
        }



        if ($dir == null)
            $dir = 'DESC';

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
            break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
            break;
            case 3:
                $sql .= " ORDER BY l.`uri` $dir";
            break;
            case 4:
                $sql .= " ORDER BY l.`header` $dir";
            break;
            case 5:
                $sql .= " ORDER BY l.`post_params` $dir";
            break;
            case 6:
                $sql .= " ORDER BY l.`get_params` $dir";
            break;
            case 7:
                $sql .= " ORDER BY l.`terminal_type` $dir";
            break;
            case 8:
                $sql .= " ORDER BY l.`ville` $dir";
            break;
            default:
                $sql .= " ORDER BY l.`date` $dir";
            break;

        }

        $sql .=" LIMIT :lf OFFSET :off";

        //        AND DATE_FORMAT(l.`date`, "%d") >= :days
        //        AND DATE_FORMAT(l.`date`, "%m") = :mois
        //        AND DATE_FORMAT(l.`date`, "%Y") = :annee

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('date', 'Date');
        //$rsm->addScalarResult('action', 'action');
        $rsm->addScalarResult('uri', 'URL');
        $rsm->addScalarResult('terminal_type', 'Terminal');
        $rsm->addScalarResult('ville', 'Zone');
        $rsm->addScalarResult('user_id', 'Utilisateur');
        $rsm->addScalarResult('error_code', 'errorCode');
        $rsm->addScalarResult('header', 'Header');
        $rsm->addScalarResult('post_params', 'Post');
        $rsm->addScalarResult('get_params', 'Get');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters(
                [
                    'start'    =>  $start,
                    'end'    =>  $end,
                    'ws'  =>  'Ws\\\%',
                    'api' =>  '%/api/%',
                    'lf'  =>  (int)$limit,
                    'off'  =>  (int)$offset
                ]
            )
        ;

        return $query->getResult();
    }
    public function getCountWsActions($start, $end, $search = null, $dir = null, $iCol = null)
    {
        $sql = "SELECT count(*) as 'count'
                FROM `".$this->table_name."` l
                WHERE l.`error_code` IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`action` LIKE :ws
                AND l.`uri` LIKE :api
                AND l.`user_id` != 0
                AND l.`date` >= :start
                AND l.`date` <= :end"
        ;
        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search
                    OR l.`uri` LIKE :search
                    OR l.`terminal_type` LIKE :search
                    OR l.`ville` LIKE :search)";
        }



        if ($dir == null)
            $dir = 'DESC';

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
            break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
            break;
            case 3:
                $sql .= " ORDER BY l.`uri` $dir";
            break;
            case 4:
                $sql .= " ORDER BY l.`header` $dir";
            break;
            case 5:
                $sql .= " ORDER BY l.`post_params` $dir";
            break;
            case 6:
                $sql .= " ORDER BY l.`get_params` $dir";
            break;
            case 7:
                $sql .= " ORDER BY l.`terminal_type` $dir";
            break;
            case 8:
                $sql .= " ORDER BY l.`ville` $dir";
            break;
        }

//        $sql .=" LIMIT :lf OFFSET :off";

        //        AND DATE_FORMAT(l.`date`, "%d") >= :days
        //        AND DATE_FORMAT(l.`date`, "%m") = :mois
        //        AND DATE_FORMAT(l.`date`, "%Y") = :annee
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('count', 'count');
        $query = $this->em->createNativeQuery($sql, $rsm)
                          ->setParameters(
                              [
                                  'start'    =>  $start,
                                  'end'    =>  $end,
                                  'ws'  =>  'Ws\\\%',
                                  'api' =>  '%/api/%',
                                  //'lf'  =>  (int)$limit,
                                  //'off'  =>  (int)$offset
                              ]
                          )
        ;
        return $query->getSingleScalarResult();
    }

    public function getErrors($start, $end, $search = null, $dir = null, $iCol = null, $offset=0, $limit=10)
    {

        $sql = "SELECT l.`id`, l.`date`, l.`action`, l.`uri`, l.`terminal_type`, l.`ville`, l.`user_id`, l.`error_code`, l.`header`, l.`post_params`, l.`get_params`
                FROM `".$this->table_name."` l
                WHERE l.`error_code` NOT IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`uri` NOT LIKE :bundles
                AND l.`uri` NOT LIKE :log
                AND l.`date` >= :start
                AND l.`date` <= :end";

        if (!empty($search['value'])){
            $sql .= " AND (l.`date` LIKE :search
                    OR l.`user_id` LIKE :search
                    OR l.`uri` LIKE :search
                    OR l.`terminal_type` LIKE :search
                    OR l.`ville` LIKE :search)";
        }



        if ($dir == null)
            $dir = 'DESC';

        switch ($iCol) //-- ORDER BY
        {
            case 1:
                $sql .= " ORDER BY l.`date` $dir";
            break;
            case 2:
                $sql .= " ORDER BY l.user_id $dir";
            break;
            case 3:
                $sql .= " ORDER BY l.`uri` $dir";
            break;
            case 4:
                $sql .= " ORDER BY l.`header` $dir";
            break;
            case 5:
                $sql .= " ORDER BY l.`post_params` $dir";
            break;
            case 6:
                $sql .= " ORDER BY l.`get_params` $dir";
            break;
            case 7:
                $sql .= " ORDER BY l.`terminal_type` $dir";
            break;
            case 8:
                $sql .= " ORDER BY l.`ville` $dir";
            break;
            default:
                $sql .= " ORDER BY l.`date` $dir";
            break;

        }

        $sql .=" LIMIT :lf OFFSET :off";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('date', 'date');
        $rsm->addScalarResult('action', 'action');
        $rsm->addScalarResult('uri', 'uri');
        $rsm->addScalarResult('terminal_type', 'terminalType');
        $rsm->addScalarResult('ville', 'zone');
        $rsm->addScalarResult('user_id', 'user');
        $rsm->addScalarResult('error_code', 'errorCode');
        $rsm->addScalarResult('header', 'header');
        $rsm->addScalarResult('post_params', 'postParams');
        $rsm->addScalarResult('get_params', 'getParams');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters(
                [
                    'start'    =>  $start,
                    'end'    =>  $end,
                    'bundles'   =>'%/bundles/%',
                    'log'       =>'%/userLogChart/%',
                    'search' => "%".$search['value']."%",
                    'lf'  =>  (int)$limit,
                    'off'  =>  (int)$offset
                ]
            )
        ;
        //echo $query->getSQL();die;
        return $query->getResult();
    }
    public function getCountErrors($start, $end, $search = null, $dir = null, $iCol = null)
    {

        $sql = "SELECT count(*) as 'count' FROM `".$this->table_name."` l
                WHERE l.`error_code` NOT IN (200,201,202,203,204,205,206,207,208,210,226,300,301,302,303,304,305,306,307,308,310)
                AND l.`uri` NOT LIKE :bundles
                AND l.`uri` NOT LIKE :log
                AND l.`date` >= :start
                AND l.`date` <= :end
                ORDER BY l.`date` DESC
                LIMIT 100";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('count', 'count');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters(
                [
                    'start'    =>  $start,
                    'end'    =>  $end,
                    'bundles'   =>'%/bundles/%',
                    'log'       =>'%/userLogChart/%',
                ]
            )
        ;

        return $query->getSingleScalarResult();
    }

    public function getTopFive($month, $year)
    {
        $query = $this->em->createQueryBuilder()
            ->select('l.user', 'l.terminalType', 'COUNT(l.user) as nbr')
            ->from($this->userlog_repository, 'l')
            ->where('l.action = :login')
            ->andWhere("DATE_FORMAT(l.date, '%m') = :month")
            ->andWhere("DATE_FORMAT(l.date, '%Y') = :year")
            ->groupBy('l.user', 'l.terminalType')
            ->orderBy('nbr', 'DESC')
            ->setParameter('login', 'Login_BO')
            ->setParameter('month', $month)
            ->setParameter('year', $year)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getPays()
    {
        $query = $this->em->createQueryBuilder()
            ->select('l.codePays as code', 'l.pays as name', 'COUNT(l.codePays) as value')
            ->from($this->userlog_repository, 'l')
            ->where('l.pays != :localhost')
            ->andWhere('l.action = :login')
            ->groupBy('l.codePays')
            ->setParameter('localhost', 'Localhost')
            ->setParameter('login', 'Login_BO')
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getProcessList()
    {
        $sql = "SHOW FULL PROCESSLIST";

        $rsm = new ResultSetMapping();

        $rsm->addScalarResult('Id', 'Id');
        $rsm->addScalarResult('User', 'User');
        $rsm->addScalarResult('Host', 'Host');
        $rsm->addScalarResult('db', 'db');
        $rsm->addScalarResult('Command', 'Command');
        $rsm->addScalarResult('Time', 'Time');
        $rsm->addScalarResult('State', 'State');
        $rsm->addScalarResult('Info', 'Info');
        $rsm->addScalarResult('Progress', 'Progress');
        $query = $this->em->createNativeQuery($sql, $rsm);

        return $query->getResult();
    }

    /**
     * Get Stats By Range of Dates
     */
    public function getNbConnexionByTypeTerminalRange($start, $end)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct, u.terminalType')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("u.date >= :start")
            ->andWhere("u.date <= :end")
            ->groupBy('u.terminalType')
            ->setParameters(['var' => 'Login_BO', 'start' => $start, 'end' => $end])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbConnexionByRange($start, $end)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("u.date >= :start")
            ->andWhere("u.date < :end")
            ->setParameters(['var' => 'Login_BO', 'start' => $start, 'end' => $end])
            ->getQuery()
            //->getDQL();
            ->getResult();

        return $query;
    }

    public function getNbErrorsByRange($start, $end)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct')
            ->from($this->userlog_repository, 'u')
            ->where('u.errorCode != 200')
            ->andWhere('u.errorCode != 201')->andWhere('u.errorCode != 202')->andWhere('u.errorCode != 203')->andWhere('u.errorCode != 204')->andWhere('u.errorCode != 205')
            ->andWhere('u.errorCode != 206')->andWhere('u.errorCode != 207')->andWhere('u.errorCode != 208')->andWhere('u.errorCode != 210')->andWhere('u.errorCode != 226')
            ->andWhere('u.errorCode != 302')->andWhere('u.errorCode != 300')->andWhere('u.errorCode != 301')->andWhere('u.errorCode != 303')->andWhere('u.errorCode != 304')
            ->andWhere('u.errorCode != 305')->andWhere('u.errorCode != 306')->andWhere('u.errorCode != 307')->andWhere('u.errorCode != 308')->andWhere('u.errorCode != 310')
            ->andWhere("u.date >= :start")
            ->andWhere("u.date <= :end")
            ->andWhere("u.uri NOT LIKE :bundle")
            ->andWhere("u.uri NOT LIKE :userlog")
            ->setParameters(
                [
                    'start' => $start,
                    'end' => $end,
                    'bundle' => '%/bundles/%',
                    'userlog' => '%/userLogChart/%',
                ]
            )
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getTopFiveRange($start, $end)
    {
        $query = $this->em->createQueryBuilder()
            ->select('l.user', 'l.terminalType', 'COUNT(l.user) as nbr')
            ->from($this->userlog_repository, 'l')
            ->where('l.action = :login')
            ->andWhere("l.date >= :start")
            ->andWhere("l.date <= :end")
            ->groupBy('l.user', 'l.terminalType')
            ->orderBy('nbr', 'DESC')
            ->setParameter('login', 'Login_BO')
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getNbConexionByTerminalRange($start, $end)
    {
        $query = $this->em->createQueryBuilder()
            ->select('COUNT(u.id) as ct, u.terminal')
            ->from($this->userlog_repository, 'u')
            ->where('u.action = :var')
            ->andWhere("u.date >= :start")
            ->andWhere("u.date <= :end")
            ->groupBy('u.terminal')
            ->setParameters(['var' => 'Login_BO', 'start' => $start, 'end' => $end])
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getYearsOfCNX()
    {
        $sql = "SELECT DISTINCT DATE_FORMAT(u.`date`, \"%Y\") as annees FROM `".$this->table_name."` u
                WHERE u.action = 'Login_BO'
                ORDER BY annees DESC
                ";

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('annees', 'year');
        $query = $this->em->createNativeQuery($sql, $rsm);

        return $query->getResult();
    }

    public function getAllActionsByUserIdByRange($start, $end, $id){

        $sql = "SELECT l.`id`, l.`date`, l.`uri`, l.`user_id`, l.`error_code`, l.exception_msg
                FROM `".$this->table_name."` l
                WHERE l.`action` NOT LIKE :ws
                AND l.`uri` NOT LIKE :api
                AND l.`uri` NOT LIKE :log
                AND l.`uri` NOT LIKE :draw
                AND l.`user_id` = :id
                AND l.`date` >= :start
                AND l.`date` <= :end
                /*ORDER BY DATE_FORMAT(l.`date`, \"%H:%i:%s\") DESC*/"
        ;

        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('date', 'date');
        $rsm->addScalarResult('uri', 'uri');
        $rsm->addScalarResult('user_id', 'user');
        $rsm->addScalarResult('error_code', 'errorCode');
        $rsm->addScalarResult('exception_msg', 'exceptionMsg');
        $query = $this->em->createNativeQuery($sql, $rsm)
            ->setParameters([
                'start' => $start,
                'end' => $end,
                'id' => $id,
                'ws'  =>  'Ws\\\%',
                'api' =>  '%/api/%',
                'log' =>  '%/userLogChart/%',
                'draw'  =>  '%draw%'
            ])
        ;
//var_dump($query->getResult());die;
        return $query->getResult();
    }
}
